{"version":3,"sources":["SteamGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["test","svg","width","height","x","d3","m","y","bump","a","n","Math","random","z","i","w","exp","range","stack","keys","offset","order","area","d","y0","y1","randomize","stuff","bumps","transpose","layers","min","l","max","domain","path","selectAll","data","join","attr","transition","delay","duration","setInterval","SteamGraph","props","d3Container","useRef","useEffect","current","interval","clearInterval","className","ref","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.603eef33.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './App.css';\nimport { schemeGreys } from 'd3';\n\ninterface IProps {\n}\n\nfunction test(svg: any) {\n  let n = 20;\n  let m = 200;\n  let k = 10;\n  let margin = {top: 100, right: 30, bottom: 30, left: 60},\n    width = 1960 - margin.left - margin.right,\n    height = 900 - margin.top - margin.bottom;\n\n  let x = d3.scaleLinear([0, m - 1], [0, width]);\n  let y = d3.scaleLinear([0, 1], [height, 0]);\n\n  function bump(a: Array<number>, n: number) {\n    const x = 1 / (0.1 + Math.random());\n    const y = 2 * Math.random() - 0.5;\n    const z = 10 / (0.1 + Math.random());\n    for (let i = 0; i < n; ++i) {\n      const w = (i / n - y) * z;\n      a[i] += x * Math.exp(-w * w);\n    }\n  }\n\n  function bumps(n: number, m: number) {\n    const a = [];\n    for (let i = 0; i < n; ++i) a[i] = 0;\n    for (let i = 0; i < m; ++i) bump(a, n);\n    return a;\n  }\n\n  let range = d3.range(n);//.map((n) => {return n.toString()});\n\n\n\n  let stack = d3.stack<any, {[key: number]: number;}, number>()\n    .keys(range)\n    .offset(d3.stackOffsetWiggle)\n    .order(d3.stackOrderNone)\n  \n  let area = d3.area<any>()\n    .x((d, i) => x(i))\n    .y0(d => y(d[0]))\n    .y1(d => y(d[1]))\n\n  function randomize() {\n      let stuff = d3.map(d3.range(n), () => bumps(m,k));\n      let transpose: number[][] = d3.transpose(stuff);\n\n      const layers = stack(transpose);\n      let min = d3.min(layers, (l)=> {return d3.min(l, d=>d[0])}) as number;\n      let max = d3.max(layers, (l)=> {return d3.max(l, d=>d[1])}) as number;\n      y.domain([min, max]);\n      return layers;\n    }\n//interpolateYlGnBu\n//interpolateWarm\n//interpolateCool\n//interpolateYlGn\n//interpolateYlOrBr\n//interpolateYlOrRd\n    let z = d3.interpolateYlGnBu;\n    let params: any = [0, 0, width, height];\n\n    const path = svg.selectAll(\"path\")\n      .data(randomize)\n      .join(\"path\")\n        .attr(\"d\", area)\n        .attr(\"fill\", () => z(Math.random()));\n\n    path.data(randomize)\n        .transition()\n        .delay(0)\n        .duration(6000)\n        .attr(\"d\", area)\n\n      const interval = setInterval(() => {\n        path.data(randomize)\n          .transition()\n          .delay(0)\n          .duration(6000)\n          .attr(\"d\", area)\n      }, 6000);\n      return interval;\n    \n}\n\nexport const SteamGraph = (props: IProps) => {\n    /* The useRef Hook creates a variable that \"holds on\" to a value across rendering\n       passes. In this case it will hold our component's SVG DOM element. It's\n       initialized null and React will assign it later (see the return statement) */\n    const d3Container = useRef(null);\n\n    /* The useEffect Hook is for running side effects outside of React,\n       for instance inserting elements into the DOM using D3 */\n    useEffect(\n        () => {\n            if (d3Container.current) {\n                const svg = d3.select(d3Container.current);\n\n\n                let interval = test(svg);\n                return () => clearInterval(interval);\n            }\n        },\n\n        /*\n            useEffect has a dependency array (below). It's a list of dependency\n            variables for this useEffect block. The block will run after mount\n            and whenever any of these variables change. We still have to check\n            if the variables are valid, but we do not have to compare old props\n            to next props to decide whether to rerender.\n        */\n        [d3Container.current])\n\n    return (\n\n        <svg\n            className=\"d3-component\"\n            width={3200}\n            height={1000}\n            ref={d3Container}\n        />\n    );\n}\n","import React, { useRef, useEffect } from 'react';\nimport './App.css';\nimport { SteamGraph} from \"./SteamGraph\";\nimport {LineChart} from \"./LineChart\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1><b>Miro Furtado</b></h1>\n        sequence research, ML engineer<br/>\n        <h2><a href=\"https://github.com/MiroFurtado\">github</a> | <a href=\"https://blog.miro.fyi\">blog</a></h2>\n        <SteamGraph/>\n      </div>\n</div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}